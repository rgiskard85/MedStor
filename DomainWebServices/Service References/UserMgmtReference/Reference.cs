//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomainWebServices.UserMgmtReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/UtilityWebServices")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string phoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string surnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int user_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phone {
            get {
                return this.phoneField;
            }
            set {
                if ((object.ReferenceEquals(this.phoneField, value) != true)) {
                    this.phoneField = value;
                    this.RaisePropertyChanged("phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                if ((object.ReferenceEquals(this.surnameField, value) != true)) {
                    this.surnameField = value;
                    this.RaisePropertyChanged("surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int user_id {
            get {
                return this.user_idField;
            }
            set {
                if ((this.user_idField.Equals(value) != true)) {
                    this.user_idField = value;
                    this.RaisePropertyChanged("user_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserMgmtReference.IUserMgmt")]
    public interface IUserMgmt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/UserExists", ReplyAction="http://tempuri.org/IUserMgmt/UserExistsResponse")]
        bool UserExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/UserExists", ReplyAction="http://tempuri.org/IUserMgmt/UserExistsResponse")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetExistingUserId", ReplyAction="http://tempuri.org/IUserMgmt/GetExistingUserIdResponse")]
        int GetExistingUserId(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetExistingUserId", ReplyAction="http://tempuri.org/IUserMgmt/GetExistingUserIdResponse")]
        System.Threading.Tasks.Task<int> GetExistingUserIdAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/InsertUser", ReplyAction="http://tempuri.org/IUserMgmt/InsertUserResponse")]
        int InsertUser(string username, string name, string surname, string email, string phone, string city, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/InsertUser", ReplyAction="http://tempuri.org/IUserMgmt/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(string username, string name, string surname, string email, string phone, string city, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/UpdateUser", ReplyAction="http://tempuri.org/IUserMgmt/UpdateUserResponse")]
        int UpdateUser(int user_id, string name, string surname, string email, string phone, string city, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/UpdateUser", ReplyAction="http://tempuri.org/IUserMgmt/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(int user_id, string name, string surname, string email, string phone, string city, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetUserInfo", ReplyAction="http://tempuri.org/IUserMgmt/GetUserInfoResponse")]
        DomainWebServices.UserMgmtReference.User GetUserInfo(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetUserInfo", ReplyAction="http://tempuri.org/IUserMgmt/GetUserInfoResponse")]
        System.Threading.Tasks.Task<DomainWebServices.UserMgmtReference.User> GetUserInfoAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetUserList", ReplyAction="http://tempuri.org/IUserMgmt/GetUserListResponse")]
        DomainWebServices.UserMgmtReference.User[] GetUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMgmt/GetUserList", ReplyAction="http://tempuri.org/IUserMgmt/GetUserListResponse")]
        System.Threading.Tasks.Task<DomainWebServices.UserMgmtReference.User[]> GetUserListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserMgmtChannel : DomainWebServices.UserMgmtReference.IUserMgmt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserMgmtClient : System.ServiceModel.ClientBase<DomainWebServices.UserMgmtReference.IUserMgmt>, DomainWebServices.UserMgmtReference.IUserMgmt {
        
        public UserMgmtClient() {
        }
        
        public UserMgmtClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserMgmtClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserMgmtClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserMgmtClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UserExists(string username) {
            return base.Channel.UserExists(username);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string username) {
            return base.Channel.UserExistsAsync(username);
        }
        
        public int GetExistingUserId(string username, string password) {
            return base.Channel.GetExistingUserId(username, password);
        }
        
        public System.Threading.Tasks.Task<int> GetExistingUserIdAsync(string username, string password) {
            return base.Channel.GetExistingUserIdAsync(username, password);
        }
        
        public int InsertUser(string username, string name, string surname, string email, string phone, string city, string password) {
            return base.Channel.InsertUser(username, name, surname, email, phone, city, password);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(string username, string name, string surname, string email, string phone, string city, string password) {
            return base.Channel.InsertUserAsync(username, name, surname, email, phone, city, password);
        }
        
        public int UpdateUser(int user_id, string name, string surname, string email, string phone, string city, string password) {
            return base.Channel.UpdateUser(user_id, name, surname, email, phone, city, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(int user_id, string name, string surname, string email, string phone, string city, string password) {
            return base.Channel.UpdateUserAsync(user_id, name, surname, email, phone, city, password);
        }
        
        public DomainWebServices.UserMgmtReference.User GetUserInfo(int user_id) {
            return base.Channel.GetUserInfo(user_id);
        }
        
        public System.Threading.Tasks.Task<DomainWebServices.UserMgmtReference.User> GetUserInfoAsync(int user_id) {
            return base.Channel.GetUserInfoAsync(user_id);
        }
        
        public DomainWebServices.UserMgmtReference.User[] GetUserList() {
            return base.Channel.GetUserList();
        }
        
        public System.Threading.Tasks.Task<DomainWebServices.UserMgmtReference.User[]> GetUserListAsync() {
            return base.Channel.GetUserListAsync();
        }
    }
}
