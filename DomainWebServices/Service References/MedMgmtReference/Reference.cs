//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomainWebServices.MedMgmtReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Medicine", Namespace="http://schemas.datacontract.org/2004/07/UtilityWebServices")]
    [System.SerializableAttribute()]
    public partial class Medicine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int med_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int quantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int med_id {
            get {
                return this.med_idField;
            }
            set {
                if ((this.med_idField.Equals(value) != true)) {
                    this.med_idField = value;
                    this.RaisePropertyChanged("med_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField.Equals(value) != true)) {
                    this.quantityField = value;
                    this.RaisePropertyChanged("quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MedMgmtReference.IMedMgmt")]
    public interface IMedMgmt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/InsertMedicine", ReplyAction="http://tempuri.org/IMedMgmt/InsertMedicineResponse")]
        int InsertMedicine(string description, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/InsertMedicine", ReplyAction="http://tempuri.org/IMedMgmt/InsertMedicineResponse")]
        System.Threading.Tasks.Task<int> InsertMedicineAsync(string description, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/UpdateMedicine", ReplyAction="http://tempuri.org/IMedMgmt/UpdateMedicineResponse")]
        int UpdateMedicine(int med_id, string description, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/UpdateMedicine", ReplyAction="http://tempuri.org/IMedMgmt/UpdateMedicineResponse")]
        System.Threading.Tasks.Task<int> UpdateMedicineAsync(int med_id, string description, int quantity, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/SetMedicineQuantity", ReplyAction="http://tempuri.org/IMedMgmt/SetMedicineQuantityResponse")]
        int SetMedicineQuantity(int med_id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/SetMedicineQuantity", ReplyAction="http://tempuri.org/IMedMgmt/SetMedicineQuantityResponse")]
        System.Threading.Tasks.Task<int> SetMedicineQuantityAsync(int med_id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/GetMedicineQuantity", ReplyAction="http://tempuri.org/IMedMgmt/GetMedicineQuantityResponse")]
        int GetMedicineQuantity(int med_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/GetMedicineQuantity", ReplyAction="http://tempuri.org/IMedMgmt/GetMedicineQuantityResponse")]
        System.Threading.Tasks.Task<int> GetMedicineQuantityAsync(int med_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/GetMedicineList", ReplyAction="http://tempuri.org/IMedMgmt/GetMedicineListResponse")]
        DomainWebServices.MedMgmtReference.Medicine[] GetMedicineList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/GetMedicineList", ReplyAction="http://tempuri.org/IMedMgmt/GetMedicineListResponse")]
        System.Threading.Tasks.Task<DomainWebServices.MedMgmtReference.Medicine[]> GetMedicineListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/MedicineExists", ReplyAction="http://tempuri.org/IMedMgmt/MedicineExistsResponse")]
        int MedicineExists(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedMgmt/MedicineExists", ReplyAction="http://tempuri.org/IMedMgmt/MedicineExistsResponse")]
        System.Threading.Tasks.Task<int> MedicineExistsAsync(string description);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMedMgmtChannel : DomainWebServices.MedMgmtReference.IMedMgmt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MedMgmtClient : System.ServiceModel.ClientBase<DomainWebServices.MedMgmtReference.IMedMgmt>, DomainWebServices.MedMgmtReference.IMedMgmt {
        
        public MedMgmtClient() {
        }
        
        public MedMgmtClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MedMgmtClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedMgmtClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedMgmtClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertMedicine(string description, int quantity, decimal price) {
            return base.Channel.InsertMedicine(description, quantity, price);
        }
        
        public System.Threading.Tasks.Task<int> InsertMedicineAsync(string description, int quantity, decimal price) {
            return base.Channel.InsertMedicineAsync(description, quantity, price);
        }
        
        public int UpdateMedicine(int med_id, string description, int quantity, decimal price) {
            return base.Channel.UpdateMedicine(med_id, description, quantity, price);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMedicineAsync(int med_id, string description, int quantity, decimal price) {
            return base.Channel.UpdateMedicineAsync(med_id, description, quantity, price);
        }
        
        public int SetMedicineQuantity(int med_id, int quantity) {
            return base.Channel.SetMedicineQuantity(med_id, quantity);
        }
        
        public System.Threading.Tasks.Task<int> SetMedicineQuantityAsync(int med_id, int quantity) {
            return base.Channel.SetMedicineQuantityAsync(med_id, quantity);
        }
        
        public int GetMedicineQuantity(int med_id) {
            return base.Channel.GetMedicineQuantity(med_id);
        }
        
        public System.Threading.Tasks.Task<int> GetMedicineQuantityAsync(int med_id) {
            return base.Channel.GetMedicineQuantityAsync(med_id);
        }
        
        public DomainWebServices.MedMgmtReference.Medicine[] GetMedicineList() {
            return base.Channel.GetMedicineList();
        }
        
        public System.Threading.Tasks.Task<DomainWebServices.MedMgmtReference.Medicine[]> GetMedicineListAsync() {
            return base.Channel.GetMedicineListAsync();
        }
        
        public int MedicineExists(string description) {
            return base.Channel.MedicineExists(description);
        }
        
        public System.Threading.Tasks.Task<int> MedicineExistsAsync(string description) {
            return base.Channel.MedicineExistsAsync(description);
        }
    }
}
